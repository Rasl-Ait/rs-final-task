///
/// @Generated by Mockolo
///



import XCTest
@testable import MovieApp


class AuthCoordinatorProtocolMock: AuthCoordinatorProtocol {
    init() { }


    private(set) var pushTabBarCallCount = 0
    var pushTabBarHandler: (() -> ())?
    func pushTabBar()  {
        pushTabBarCallCount += 1
        if let pushTabBarHandler = pushTabBarHandler {
            pushTabBarHandler()
        }
        
    }
}

class ListsCoordinatorProtocolMock: ListsCoordinatorProtocol {
    init() { }


    private(set) var popCallCount = 0
    var popHandler: (() -> ())?
    func pop()  {
        popCallCount += 1
        if let popHandler = popHandler {
            popHandler()
        }
        
    }

    private(set) var pushListDetailVCCallCount = 0
    var pushListDetailVCHandler: ((ListModel) -> ())?
    func pushListDetailVC(list: ListModel)  {
        pushListDetailVCCallCount += 1
        if let pushListDetailVCHandler = pushListDetailVCHandler {
            pushListDetailVCHandler(list)
        }
        
    }

    private(set) var pushAuthVCCallCount = 0
    var pushAuthVCHandler: (() -> ())?
    func pushAuthVC()  {
        pushAuthVCCallCount += 1
        if let pushAuthVCHandler = pushAuthVCHandler {
            pushAuthVCHandler()
        }
        
    }
}

class ScreenFactoryMock: ScreenFactory {
    init() { }


    private(set) var makeAuthScreenCallCount = 0
    var makeAuthScreenHandler: ((AuthCoordinatorProtocol) -> (AuthViewController))?
    func makeAuthScreen(_ coordinator: AuthCoordinatorProtocol) -> AuthViewController {
        makeAuthScreenCallCount += 1
        if let makeAuthScreenHandler = makeAuthScreenHandler {
            return makeAuthScreenHandler(coordinator)
        }
        fatalError("makeAuthScreenHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeListsScreenCallCount = 0
    var makeListsScreenHandler: ((ListsCoordinatorProtocol, Int?) -> (ListsViewController))?
    func makeListsScreen(_ coordinator: ListsCoordinatorProtocol, mediaID: Int?) -> ListsViewController {
        makeListsScreenCallCount += 1
        if let makeListsScreenHandler = makeListsScreenHandler {
            return makeListsScreenHandler(coordinator, mediaID)
        }
        fatalError("makeListsScreenHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeListDetailScreenCallCount = 0
    var makeListDetailScreenHandler: ((ListDetailCoordinatorProtocol, ListModel) -> (ListDetailViewController))?
    func makeListDetailScreen(_ coordinator: ListDetailCoordinatorProtocol, list: ListModel) -> ListDetailViewController {
        makeListDetailScreenCallCount += 1
        if let makeListDetailScreenHandler = makeListDetailScreenHandler {
            return makeListDetailScreenHandler(coordinator, list)
        }
        fatalError("makeListDetailScreenHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeMovieDetailScreenCallCount = 0
    var makeMovieDetailScreenHandler: ((MovieDetailCoordinatorProtocol, Int) -> (MovieDetailViewController))?
    func makeMovieDetailScreen(_ coordinator: MovieDetailCoordinatorProtocol, id: Int) -> MovieDetailViewController {
        makeMovieDetailScreenCallCount += 1
        if let makeMovieDetailScreenHandler = makeMovieDetailScreenHandler {
            return makeMovieDetailScreenHandler(coordinator, id)
        }
        fatalError("makeMovieDetailScreenHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeWebViewScreenCallCount = 0
    var makeWebViewScreenHandler: ((MovieDetailCoordinatorProtocol, String) -> (WebViewController))?
    func makeWebViewScreen(_ coordinator: MovieDetailCoordinatorProtocol, stringURL: String) -> WebViewController {
        makeWebViewScreenCallCount += 1
        if let makeWebViewScreenHandler = makeWebViewScreenHandler {
            return makeWebViewScreenHandler(coordinator, stringURL)
        }
        fatalError("makeWebViewScreenHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeSearchScreenCallCount = 0
    var makeSearchScreenHandler: ((SearchCoordinatorProtocol) -> (SearchViewController))?
    func makeSearchScreen(_ coordinator: SearchCoordinatorProtocol) -> SearchViewController {
        makeSearchScreenCallCount += 1
        if let makeSearchScreenHandler = makeSearchScreenHandler {
            return makeSearchScreenHandler(coordinator)
        }
        fatalError("makeSearchScreenHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeFavoriteScreenCallCount = 0
    var makeFavoriteScreenHandler: ((FavoriteCoordinatorProtocol) -> (FavoriteViewController))?
    func makeFavoriteScreen(_ coordinator: FavoriteCoordinatorProtocol) -> FavoriteViewController {
        makeFavoriteScreenCallCount += 1
        if let makeFavoriteScreenHandler = makeFavoriteScreenHandler {
            return makeFavoriteScreenHandler(coordinator)
        }
        fatalError("makeFavoriteScreenHandler returns can't have a default value thus its handler must be set")
    }
}

class SearchCoordinatorProtocolMock: SearchCoordinatorProtocol {
    init() { }


    private(set) var popCallCount = 0
    var popHandler: (() -> ())?
    func pop()  {
        popCallCount += 1
        if let popHandler = popHandler {
            popHandler()
        }
        
    }

    private(set) var pushMovieDetailVCCallCount = 0
    var pushMovieDetailVCHandler: ((Int) -> ())?
    func pushMovieDetailVC(id: Int)  {
        pushMovieDetailVCCallCount += 1
        if let pushMovieDetailVCHandler = pushMovieDetailVCHandler {
            pushMovieDetailVCHandler(id)
        }
        
    }
}

class FavoriteCoordinatorProtocolMock: FavoriteCoordinatorProtocol {
    init() { }


    private(set) var pushMovieDetailVCCallCount = 0
    var pushMovieDetailVCHandler: ((Int) -> ())?
    func pushMovieDetailVC(id: Int)  {
        pushMovieDetailVCCallCount += 1
        if let pushMovieDetailVCHandler = pushMovieDetailVCHandler {
            pushMovieDetailVCHandler(id)
        }
        
    }
}

class ListDetailCoordinatorProtocolMock: ListDetailCoordinatorProtocol {
    init() { }


    private(set) var popCallCount = 0
    var popHandler: (() -> ())?
    func pop()  {
        popCallCount += 1
        if let popHandler = popHandler {
            popHandler()
        }
        
    }

    private(set) var pushMovieDetailVCCallCount = 0
    var pushMovieDetailVCHandler: ((Int) -> ())?
    func pushMovieDetailVC(id: Int)  {
        pushMovieDetailVCCallCount += 1
        if let pushMovieDetailVCHandler = pushMovieDetailVCHandler {
            pushMovieDetailVCHandler(id)
        }
        
    }
}

class CoordinatorFactoryMock: CoordinatorFactory {
    init() { }


    private(set) var makeAppCoordinatorCallCount = 0
    var makeAppCoordinatorHandler: ((Router) -> (AppCoordinator))?
    func makeAppCoordinator(router: Router) -> AppCoordinator {
        makeAppCoordinatorCallCount += 1
        if let makeAppCoordinatorHandler = makeAppCoordinatorHandler {
            return makeAppCoordinatorHandler(router)
        }
        fatalError("makeAppCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeAuthCoordinatorCallCount = 0
    var makeAuthCoordinatorHandler: ((Router) -> (AuthCoordinator))?
    func makeAuthCoordinator(router: Router) -> AuthCoordinator {
        makeAuthCoordinatorCallCount += 1
        if let makeAuthCoordinatorHandler = makeAuthCoordinatorHandler {
            return makeAuthCoordinatorHandler(router)
        }
        fatalError("makeAuthCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeTabBarCoordinatorCallCount = 0
    var makeTabBarCoordinatorHandler: ((Router) -> (TabBarCoordinator))?
    func makeTabBarCoordinator(router: Router) -> TabBarCoordinator {
        makeTabBarCoordinatorCallCount += 1
        if let makeTabBarCoordinatorHandler = makeTabBarCoordinatorHandler {
            return makeTabBarCoordinatorHandler(router)
        }
        fatalError("makeTabBarCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeListsCoordinatorCallCount = 0
    var makeListsCoordinatorHandler: ((Router, TabBarController) -> (ListsCoordinator))?
    func makeListsCoordinator(router: Router, tabBarViewController: TabBarController) -> ListsCoordinator {
        makeListsCoordinatorCallCount += 1
        if let makeListsCoordinatorHandler = makeListsCoordinatorHandler {
            return makeListsCoordinatorHandler(router, tabBarViewController)
        }
        fatalError("makeListsCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeListDetailCoordinatorCallCount = 0
    var makeListDetailCoordinatorHandler: ((Router, ListModel) -> (ListDetailCoordinator))?
    func makeListDetailCoordinator(router: Router, list: ListModel) -> ListDetailCoordinator {
        makeListDetailCoordinatorCallCount += 1
        if let makeListDetailCoordinatorHandler = makeListDetailCoordinatorHandler {
            return makeListDetailCoordinatorHandler(router, list)
        }
        fatalError("makeListDetailCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeMovieDetailCoordinatorCallCount = 0
    var makeMovieDetailCoordinatorHandler: ((Router, Int) -> (MovieDetailCoordinator))?
    func makeMovieDetailCoordinator(router: Router, movieID: Int) -> MovieDetailCoordinator {
        makeMovieDetailCoordinatorCallCount += 1
        if let makeMovieDetailCoordinatorHandler = makeMovieDetailCoordinatorHandler {
            return makeMovieDetailCoordinatorHandler(router, movieID)
        }
        fatalError("makeMovieDetailCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeSearchCoordinatorCallCount = 0
    var makeSearchCoordinatorHandler: ((Router, TabBarController) -> (SearchCoordinator))?
    func makeSearchCoordinator(router: Router, tabBarViewController: TabBarController) -> SearchCoordinator {
        makeSearchCoordinatorCallCount += 1
        if let makeSearchCoordinatorHandler = makeSearchCoordinatorHandler {
            return makeSearchCoordinatorHandler(router, tabBarViewController)
        }
        fatalError("makeSearchCoordinatorHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeFavoriteCoordinatorCallCount = 0
    var makeFavoriteCoordinatorHandler: ((Router, TabBarController) -> (FavoriteCoordinator))?
    func makeFavoriteCoordinator(router: Router, tabBarViewController: TabBarController) -> FavoriteCoordinator {
        makeFavoriteCoordinatorCallCount += 1
        if let makeFavoriteCoordinatorHandler = makeFavoriteCoordinatorHandler {
            return makeFavoriteCoordinatorHandler(router, tabBarViewController)
        }
        fatalError("makeFavoriteCoordinatorHandler returns can't have a default value thus its handler must be set")
    }
}

class MovieDetailCoordinatorProtocolMock: MovieDetailCoordinatorProtocol {
    init() { }


    private(set) var popCallCount = 0
    var popHandler: (() -> ())?
    func pop()  {
        popCallCount += 1
        if let popHandler = popHandler {
            popHandler()
        }
        
    }

    private(set) var pushWebViewVCCallCount = 0
    var pushWebViewVCHandler: ((String) -> ())?
    func pushWebViewVC(stringURL: String)  {
        pushWebViewVCCallCount += 1
        if let pushWebViewVCHandler = pushWebViewVCHandler {
            pushWebViewVCHandler(stringURL)
        }
        
    }

    private(set) var pushListCallCount = 0
    var pushListHandler: ((Int) -> ())?
    func pushList(mediaID: Int)  {
        pushListCallCount += 1
        if let pushListHandler = pushListHandler {
            pushListHandler(mediaID)
        }
        
    }
}

class RouterMock: Router {
    init() { }


    private(set) var toPresentCallCount = 0
    var toPresentHandler: (() -> (UIViewController?))?
    func toPresent() -> UIViewController? {
        toPresentCallCount += 1
        if let toPresentHandler = toPresentHandler {
            return toPresentHandler()
        }
        return nil
    }

    private(set) var presentCallCount = 0
    var presentHandler: ((Presentable?) -> ())?
    func present(_ module: Presentable?)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(module)
        }
        
    }

    private(set) var presentModuleCallCount = 0
    var presentModuleHandler: ((Presentable?, Bool) -> ())?
    func present(_ module: Presentable?, animated: Bool)  {
        presentModuleCallCount += 1
        if let presentModuleHandler = presentModuleHandler {
            presentModuleHandler(module, animated)
        }
        
    }

    private(set) var pushCallCount = 0
    var pushHandler: ((Presentable?) -> ())?
    func push(_ module: Presentable?)  {
        pushCallCount += 1
        if let pushHandler = pushHandler {
            pushHandler(module)
        }
        
    }

    private(set) var pushModuleCallCount = 0
    var pushModuleHandler: ((Presentable?, Bool) -> ())?
    func push(_ module: Presentable?, hideBottomBar: Bool)  {
        pushModuleCallCount += 1
        if let pushModuleHandler = pushModuleHandler {
            pushModuleHandler(module, hideBottomBar)
        }
        
    }

    private(set) var pushModuleAnimatedCallCount = 0
    var pushModuleAnimatedHandler: ((Presentable?, Bool) -> ())?
    func push(_ module: Presentable?, animated: Bool)  {
        pushModuleAnimatedCallCount += 1
        if let pushModuleAnimatedHandler = pushModuleAnimatedHandler {
            pushModuleAnimatedHandler(module, animated)
        }
        
    }

    private(set) var pushModuleAnimatedCompletionCallCount = 0
    var pushModuleAnimatedCompletionHandler: ((Presentable?, Bool, (() -> Void)?) -> ())?
    func push(_ module: Presentable?, animated: Bool, completion: (() -> Void)?)  {
        pushModuleAnimatedCompletionCallCount += 1
        if let pushModuleAnimatedCompletionHandler = pushModuleAnimatedCompletionHandler {
            pushModuleAnimatedCompletionHandler(module, animated, completion)
        }
        
    }

    private(set) var pushModuleAnimatedHideBottomBarCallCount = 0
    var pushModuleAnimatedHideBottomBarHandler: ((Presentable?, Bool, Bool, (() -> Void)?) -> ())?
    func push(_ module: Presentable?, animated: Bool, hideBottomBar: Bool, completion: (() -> Void)?)  {
        pushModuleAnimatedHideBottomBarCallCount += 1
        if let pushModuleAnimatedHideBottomBarHandler = pushModuleAnimatedHideBottomBarHandler {
            pushModuleAnimatedHideBottomBarHandler(module, animated, hideBottomBar, completion)
        }
        
    }

    private(set) var popModuleCallCount = 0
    var popModuleHandler: (() -> ())?
    func popModule()  {
        popModuleCallCount += 1
        if let popModuleHandler = popModuleHandler {
            popModuleHandler()
        }
        
    }

    private(set) var popModuleAnimatedCallCount = 0
    var popModuleAnimatedHandler: ((Bool) -> ())?
    func popModule(animated: Bool)  {
        popModuleAnimatedCallCount += 1
        if let popModuleAnimatedHandler = popModuleAnimatedHandler {
            popModuleAnimatedHandler(animated)
        }
        
    }

    private(set) var dismissModuleCallCount = 0
    var dismissModuleHandler: (() -> ())?
    func dismissModule()  {
        dismissModuleCallCount += 1
        if let dismissModuleHandler = dismissModuleHandler {
            dismissModuleHandler()
        }
        
    }

    private(set) var dismissModuleAnimatedCallCount = 0
    var dismissModuleAnimatedHandler: ((Bool, (() -> Void)?) -> ())?
    func dismissModule(animated: Bool, completion: (() -> Void)?)  {
        dismissModuleAnimatedCallCount += 1
        if let dismissModuleAnimatedHandler = dismissModuleAnimatedHandler {
            dismissModuleAnimatedHandler(animated, completion)
        }
        
    }

    private(set) var setRootModuleCallCount = 0
    var setRootModuleHandler: ((Presentable?) -> ())?
    func setRootModule(_ module: Presentable?)  {
        setRootModuleCallCount += 1
        if let setRootModuleHandler = setRootModuleHandler {
            setRootModuleHandler(module)
        }
        
    }

    private(set) var setRootModuleHideBarCallCount = 0
    var setRootModuleHideBarHandler: ((Presentable?, Bool) -> ())?
    func setRootModule(_ module: Presentable?, hideBar: Bool)  {
        setRootModuleHideBarCallCount += 1
        if let setRootModuleHideBarHandler = setRootModuleHideBarHandler {
            setRootModuleHideBarHandler(module, hideBar)
        }
        
    }

    private(set) var popToRootModuleCallCount = 0
    var popToRootModuleHandler: ((Bool) -> ())?
    func popToRootModule(animated: Bool)  {
        popToRootModuleCallCount += 1
        if let popToRootModuleHandler = popToRootModuleHandler {
            popToRootModuleHandler(animated)
        }
        
    }
}

class AppFactoryMock: AppFactory {
    init() { }


    private(set) var makeKeyWindowWithCoordinatorCallCount = 0
    var makeKeyWindowWithCoordinatorHandler: ((UIWindow) -> (AppCoordinator))?
    func makeKeyWindowWithCoordinator(window: UIWindow) -> AppCoordinator {
        makeKeyWindowWithCoordinatorCallCount += 1
        if let makeKeyWindowWithCoordinatorHandler = makeKeyWindowWithCoordinatorHandler {
            return makeKeyWindowWithCoordinatorHandler(window)
        }
        fatalError("makeKeyWindowWithCoordinatorHandler returns can't have a default value thus its handler must be set")
    }
}

